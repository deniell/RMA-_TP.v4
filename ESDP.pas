Unit ESDP;

Interface

Uses Dialogs, SysUtils; 

var
  Rozmir:string;
  Osnov_Otklon:string;
  IT:byte;
  Dmax,Dmin,D,Dopusk,Es,Ei:real;
  Kod:byte;

Procedure Wal_Otv(RozmirV:string;Var ITV:byte;
                  Var DmaxV,DminV,DV,DopuskV,EsV,EiV:real;
                  Var Osnov_OtklonV:string;Var KodV:byte);
Procedure Otvir(Rozmir:string;Var IT:byte;
                  Var Dmax,Dmin,D,Dopusk,Es,Ei:real;
                  Var Osnov_Otklon:string;Var Kod:byte);
Procedure Wal(Rozmir:string;Var IT:byte;
                  Var Dmax,Dmin,D,Dopusk,Es,Ei:real;
                  Var Osnov_Otklon:string;Var Kod:byte);
Procedure Liniyni(Rozmir:string;Var IT:byte;
                  Var Dmax,Dmin,D,Dopusk,Es,Ei:real;
                  Var Osnov_Otklon:string;Var Kod:byte);

Implementation

{***********************************************************************}
Var
  a,b,L,
  List                    :  byte;
  Delta                   :  real;
  Code,Code1,Code2        :  word;
  Rozmir1,Rozmir2         :  string;




Const
  IT_Tab : array [1..15] of byte=
        (3,4,5,6,7,8,9,10,11,12,13,14,15,16,17);
  Dopusk_Tab : array [1..21,1..15] of real =
      ((2,3,4,6,10,14,25,40,60,100,140,250,400,600,1000),     {  1 }
       (2.5,4,5,8,12,18,30,48,75,120,180,300,480,750,1200),     {  2 }
       (2.5,4,6,9,15,22,36,58,90,150,220,360,580,900,1500),     {  3 }
       (3,5,8,11,18,27,43,70,110,180,270,430,700,1100,1800),  {  4 }
       (4,6,9,13,21,33,52,84,130,210,330,520,840,1300,2100),  {  5 }
       (4,7,11,16,25,39,62,100,160,250,390,620,1000,1600,2500), {  6 }
       (5,8,13,19,30,46,74,120,190,300,460,740,1200,1900,3000), {  7 }
       (6,10,15,22,35,54,87,140,220,350,540,870,1400,2200,3500), {  8 }
       (8,12,18,25,40,63,100,160,250,400,630,1000,1600,2500,4000), {  9 }
       (10,14,20,29,46,72,115,185,290,460,720,1150,1850,2900,4600), { 10 }
       (12,16,23,32,52,81,130,210,320,520,810,1300,2100,3200,5200), { 11 }
       (13,18,25,36,57,89,140,230,360,570,890,1400,2300,3600,5700), { 12 }
       (15,20,27,40,63,97,155,250,400,630,970,1550,2500,4000,6300), { 13 }

       (16,22,30,44,70,110,175,280,440,700,1100,1750,2800,4400,7000), { 14 }
       (18,25,35,50,80,125,200,320,500,800,1250,2000,3200,5000,8000), { 15 }
       (21,29,40,56,90,140,230,360,560,900,1400,2300,3600,5600,9000), { 16 }
       (24,34,46,66,105,165,260,420,660,1050,1650,2600,4200,6600,10500), { 17 }
       (29,40,54,78,125,195,310,500,780,1250,1950,3100,5000,7800,12500), { 18 }
       (35,48,65,92,150,235,370,600,920,1500,2300,3700,6000,9200,15000), { 19 }
       (41,57,77,110,175,280,440,700,1100,1750,2800,4400,7000,11000,17500), { 20
}
       (50, 69,93,135,210,330,540,860,1350,2100,3300,5400,8600,13500,21000));{
21 }

  Osnov_Otklon_Wal_500 : array [1..62] of string[100] =
  ('a','b','c','cd','d','e','ef','f','fg','g','h','js','j','jj','k','kk',
   'm','n','p','r','s','t','u','v','x','y','z','za','zb','zc',
       {      J  - IT5..IT6;   jj  - IT7 .
              k  - IT4..IT7;   kk  - IT8..IT17  }
   'A','B','C','CD','D','E','EF','F','FG','G','H','Js','J','JJ','JJJ',
   'K','M','MM','N','NN','P','R','S','T','U','V','X','Y','Z','ZA','ZB','ZG');
       {      J  - IT6;   JJ  - IT6;  JJJ - IT8.
              M  - IT4..IT8;   MM  - IT8..IT17; N - IT4..8; NN - IT>8. }

  Interval_Otkl_500 : array [1..25] of word=
        (3,6,10,14,18,24,30,40,50,65,80,100,120,140,160,180,200,
         225,250,280,315,355,400,450,500);

  Es_Ei_Tab_500 : array [1..2,1..25,1..32] of integer =
            {  2222 - IT/2;    1313 - непередбачене  ГОСТом }
               {         вал      }
     (((-270,-140,-60,-34,-20,-14,-10,-6,-4,-2,0,2222,-2,-4,
        0,0,2,4,6,10,14,1313,18,1313,20,1313,26,32,40,60
        ,0,0),        {  1 }
      (-270,-140,-70,-46,-30,-20,-14,-10,-6,-4,0,2222,-2,-4,
        1,0,4,8,12,15,19,1313,23,1313,28,1313,35,42,50,80
        ,0,0),        {  2 }
      (-280,-150,-80,-56,-40,-25,-18,-13,-8,-5,0,2222,-2,-5,
        1,0,6,10,15,19,23,1313,28,1313,34,1313,42,52,67,97
        ,0,0),        {  3 }
      (-290,-150,-95,1313,-50,-32,1313,-16,1313,-6,0,2222,-3,-6,
        1,0,7,12,18,23,28,1313,33,1313,40,1313,50,64,90,130
        ,0,0),       {  4 }
      (-290,-150,-95,1313,-50,-32,1313,-16,1313,-6,0,2222,-3,-6,
        1,0,7,12,18,23,28,1313,33,39,45,1313,60,77,108,150
        ,0,0),        {  5 }
      (-300,-160,-110,1313,-65,-40,1313,-20,1313,-7,0,2222,-4,-8,
        2,0,8,15,22,28,35,1313,41,47,54,63,73,98,136,188
        ,0,0),          {  6 }
      (-300,-160,-110,1313,-65,-40,1313,-20,1313,-7,0,2222,-4,-8,
        2,0,8,15,22,28,35,41,48,55,64,75,88,118,160,218
        ,0,0),           {  7 }
      (-310,-170,-120,1313,-80,-50,1313,-25,1313,-9,0,2222,-5,-10,
        2,0,9,17,26,34,43,48,60,68,80,94,112,148,200,274
        ,0,0),          {  8 }
      (-320,-180,-130,1313,-80,-50,1313,-25,1313,-9,0,2222,-5,-10,
        2,0,9,17,26,34,43,54,70,81,97,114,136,180,242,325
        ,0,0),         {  9 }
      (-340,-190,-140,1313,-100,-60,1313,-30,1313,-10,0,2222,-7,-12,
        2,0,11,20,32,41,53,66,87,102,122,144,172,226,300,405
        ,0,0),      { 10 }
      (-360,-200,-150,1313,-100,-60,1313,-30,1313,-10,0,2222,-7,-12,
        2,0,11,20,32,43,59,75,102,120,146,174,210,274,360,480
        ,0,0),     { 11 }
      (-380,-220,-170,1313,-120,-72,1313,-36,1313,-12,0,2222,-9,-15,
        3,0,13,23,37,51,71,91,124,146,178,214,258,335,445,585
        ,0,0),     { 12 }
      (-410,-240,-180,1313,-120,-72,1313,-36,1313,-12,0,2222,-9,-15,
        3,0,13,23,37,54,79,104,144,172,210,254,310,400,525,690
        ,0,0),     { 13 }
      (-460,-260,-200,1313,-145,-85,1313,-43,1313,-14,0,2222,-11,-18,
        3,0,15,27,43,63,92,122,170,202,248,300,365,470,620,800
        ,0,0),     { 14 }
      (-520,-280,-210,1313,-145,-85,1313,-43,1313,-14,0,2222,-11,-18,
        3,0,15,27,43,65,100,134,190,228,280,340,415,535,700,900
        ,0,0),    { 15 }
      (-580,-310,-230,1313,-145,-85,1313,-43,1313,-14,0,2222,-11,-18,
        3,0,15,27,43,68,108,146,210,252,310,380,465,600,780,1000
        ,0,0),   { 16 }
      (-660,-340,-240,1313,-170,-100,1313,-50,1313,-15,0,2222,-13,-21,
        4,0,17,31,50,77,122,166,236,284,350,425,520,670,880,1150
        ,0,0),   { 17 }
      (-740,-380,-260,1313,-170,-100,1313,-50,1313,-15,0,2222,-13,-21,
        4,0,17,31,50,80,130,180,258,310,385,470,575,740,960,1250
        ,0,0),   { 18 }
      (-820,-420,-280,1313,-170,-100,1313,-50,1313,-15,0,2222,-13,-21,
        4,0,17,31,50,84,140,196,284,340,425,520,640,820,1050,1350
        ,0,0),  { 19 }
      (-920,-480,-300,1313,-190,-110,1313,-56,1313,-17,0,2222,-16,-26,
        4,0,20,34,56,94,158,218,315,385,475,580,710,920,1200,1550
        ,0,0),  { 20 }
      (-1050,-540,-330,1313,-190,-110,1313,-56,1313,-17,0,2222,-16,-26,
        4,0,20,34,56,98,170,240,350,425,525,650,790,1000,1300,1700
        ,0,0), { 21 }
      (-1200,-600,-360,1313,-210,-125,1313,-62,1313,-18,0,2222,-18,-28,
        4,0,21,37,62,108,190,268,390,475,590,730,900,1150,1500,1900
        ,0,0),{ 22 }
      (-1350,-680,-400,1313,-210,-125,1313,-62,1313,-18,0,2222,-18,-28,
        4,0,21,37,62,114,208,294,435,530,660,820,1000,1300,1650,2100
        ,0,0),{ 23 }
      (-1500,-760,-440,1313,-230,-135,1313,-68,1313,-20,0,2222,-20,-32,
        5,0,23,40,68,126,232,330,490,595,740,920,1100,1450,1850,2400
        ,0,0),{ 24 }
      (-1650,-840,-480,1313,-230,-135,1313,-68,1313,-20,0,2222,-20,-32,
        5,0,23,40,68,132,252,360,540,660,820,1000,1250,1600,2100,2600
        ,0,0)),{ 25 }

               {         отверстие      }

        ((270,140,60,34,20,14,10,6,4,2,0,2222,2,4,6,
        0,-2,-2,-4,-4,-6,-10,-14,1313,-18,1313,-20,1313,-26,-32,-40,-60), {  1 }
      (270,140,70,46,30,20,14,10,6,4,0,2222,5,6,10,
        -1,-4,-4,-8,0,-12,-15,-19,1313,-23,1313,-28,1313,-35,-42,-50,-80),{  2 }
      (280,150,80,56,40,25,18,13,8,5,0,2222,5,8,12,
        -1,-6,-6,-10,0,-15,-19,-23,1313,-28,1313,-34,1313,-42,-52,-67,-97), {  3
}
      (290,150,95,1313,50,32,1313,16,1313,6,0,2222,6,10,15,
        -1,-7,-7,-12,0,-18,-23,-28,1313,-33,1313,-40,1313,-50,-64,-90,-130),{  4
}
      (290,150,95,1313,50,32,1313,16,1313,6,0,2222,6,10,15,
        -1,-7,-7,-12,0,-18,-23,-28,1313,-33,-39,-45,1313,-60,-77,-108,-150),{  5
}
      (300,160,110,1313,65,40,1313,20,1313,7,0,2222,8,12,20,
        -2,-8,-8,-15,0,-22,-28,-35,1313,-41,-47,-54,-63,-73,-98,-136,-188), {  6
}
      (300,160,110,1313,65,40,1313,20,1313,7,0,2222,8,12,20,
        -2,-8,-8,-15,0,-22,-28,-35,-41,-48,-55,-64,-75,-88,-118,-160,-218), {  7
}
      (310,170,120,1313,80,50,1313,25,1313,9,0,2222,10,14,24,
        -2,-9,-9,-17,0,-26,-34,-43,-48,-60,-68,-80,-94,-112,-148,-200,-274), {
8 }
      (320,180,130,1313,80,50,1313,25,1313,9,0,2222,10,14,24,
        -2,-9,-9,-17,0,-26,-34,-43,-54,-70,-81,-97,-114,-136,-180,-242,-325),{
9 }
      (340,190,140,1313,100,60,1313,30,1313,10,0,2222,13,18,28,
        -2,-11,-11,-20,0,-32,-41,-53,-66,-87,-102,-122,-144,-172,-226,-300,-
405),{ 10 }
      (360,200,150,1313,100,60,1313,30,1313,10,0,2222,13,18,28,
        -2,-11,-11,-20,0,-32,-43,-59,-75,-102,-120,-146,-174,-210,-274,-360,-
480),{ 11 }
      (380,220,170,1313,120,72,1313,36,1313,12,0,2222,16,22,34,
        -3,-13,-13,-23,0,-37,-51,-71,-91,-124,-146,-178,-214,-258,-335,-445,-
585),{ 12 }
      (410,240,180,1313,120,72,1313,36,1313,12,0,2222,16,22,34,
        -3,-13,-13,-23,0,-37,-54,-79,-104,-144,-172,-210,-254,-310,-400,-525,-
690),{ 13 }
      (460,260,200,1313,145,85,1313,43,1313,14,0,2222,18,26,41,
        -3,-15,-15,-27,0,-43,-63,-92,-122,-170,-202,-248,-300,-365,-470,-620,-
800),     { 14 }
      (520,280,210,1313,145,85,1313,43,1313,14,0,2222,18,26,41,
        -3,-15,-15,-27,0,-43,-65,-100,-134,-190,-228,-280,-340,-415,-535,-700,-
900),    { 15 }
      (580,310,230,1313,145,85,1313,43,1313,14,0,2222,18,26,41,
        -3,-15,-15,-27,0,-43,-68,-108,-146,-210,-252,-310,-380,-465,-600,-780,-
1000),   { 16 }
      (660,340,240,1313,170,100,1313,50,1313,15,0,2222,22,30,47,
        -4,-17,-17,-31,0,-50,-77,-122,-166,-236,-284,-350,-425,-520,-670,-880,-
1150),   { 17 }
      (740,380,260,1313,170,100,1313,50,1313,15,0,2222,22,30,47,
        -4,-17,-17,-31,0,-50,-80,-130,-180,-258,-310,-385,-470,-575,-740,-960,-
1250),   { 18 }
      (820,420,280,1313,170,100,1313,50,1313,15,0,2222,22,30,47,
        -4,-17,-17,-31,0,-50,-84,-140,-196,-284,-340,-425,-520,-640,-820,-1050,-
1350),  { 19 }
      (920,480,300,1313,190,110,1313,56,1313,17,0,2222,25,36,55,
        -4,-20,-20,-34,0,-56,-94,-158,-218,-315,-385,-475,-580,-710,-920,-1200,-
1550),  { 20 }
      (1050,540,330,1313,190,110,1313,56,1313,17,0,2222,25,36,55,
        -4,-20,-20,-34,0,-56,-98,-170,-240,-350,-425,-525,-650,-790,-1000,-
1300,-1700), { 21 }
      (1200,600,360,1313,210,125,1313,62,1313,18,0,2222,29,39,60,
        -4,-21,-21,-37,0,-62,-108,-190,-268,-390,-475,-590,-730,-900,-1150,-
1500,-1900),{ 22 }
      (1350,680,400,1313,210,125,1313,62,1313,18,0,2222,29,39,60,
        -4,-21,-21,-37,0,-62,-114,-208,-294,-435,-530,-660,-820,-1000,-1300,-
1650,-2100),{ 23 }
      (1500,760,440,1313,230,135,1313,68,1313,20,0,2222,33,43,66,
        -5,-23,-23,-40,0,-68,-126,-232,-330,-490,-595,-740,-920,-1100,-1450,-
1850,-2400),{ 24 }
      (1650,840,480,1313,230,135,1313,68,1313,20,0,2222,33,43,66,
        -5,-23,-23,-40,0,-68,-132,-252,-360,-540,-660,-820,-1000,-1250,-1600,-
2100,-2600)));{ 25 }

  Delta_Tab : array [1..25,1..6] of real =
       ((0,0,0,0,0,0),
        (1,1.5,1,3,4,6),
        (1,1.5,2,3,6,7),
        (1,2,3,3,7,9),
        (1,2,3,3,7,9),
        (1.5,2,3,4,8,12),
        (1.5,2,3,4,8,12),  { 7 }
        (1.5,3,4,5,9,14),  { 8 }
        (1.5,3,4,5,9,14),  { 9 }
        (2,3,5,6,11,16),   { 10 }
        (2,3,5,6,11,16),   { 11 }
        (2,4,5,7,13,19),   { 12 }
        (2,4,5,7,13,19),   { 13 }
        (3,4,6,7,15,23),   { 14 }
        (3,4,6,7,15,23),   { 15 }
        (3,4,6,7,15,23),   { 16 }
        (3,4,6,9,17,26),   { 17 }
        (3,4,6,9,17,26),   { 18 }
        (3,4,6,9,17,26),   { 19 }
        (4,4,7,9,20,29),   { 20 }
        (4,4,7,9,20,29),   { 21 }
        (4,5,7,11,21,32),  { 22 }
        (4,5,7,11,21,32),  { 23 }
        (5,5,7,13,23,34),  { 24 }
        (5,5,7,13,23,34)); { 25 }

  Osnov_Otklon_Wal_3150 : array [1..34] of string[100] =
  ('c','cd','d','e','f','g','h','js',
   'k','m','n','p','r','s','t','u','v',

   'C','CD','D','E','F','G','H','Js',
   'K','M','N','P','R','S','T','U','V');

  Interval_Otkl_3150 : array [1..16] of word=
        (560,630,710,800,900,1000,1120,1250,1400,1600,1800,2000,
         2240,2500,2280,3150);

  Es_Ei_Tab_3150 : array [1..2,1..16,1..17] of integer =
            {  2222 - IT/2;    1313 - непередбачене  ГОСТом }
               {   вал  }
 (((-520,-370,-260,-145,-76,-22,0,2222,0,26,44,78,150,280,400,600,740), { 1}
   (-580,-390,-260,-145,-76,-22,0,2222,0,26,44,78,155,310,450,660,820), { 2}
   (-640,-430,-290,-160,-80,-24,0,2222,0,30,50,88,175,340,500,740,920), { 3}
   (-700,-450,-290,-160,-80,-24,0,2222,0,30,50,88,185,380,560,840,1000),{ 4}
   (-780,-500,-320,-170,-86,-26,0,2222,0,34,56,100,210,430,620,940,1150),{ 5}
   (-860,-520,-320,-170,-86,-26,0,2222,0,34,56,100,220,470,680,1050,1300),{ 6}
   (-940,-580,-350,-195,-98,-28,0,2222,0,40,66,120,250,520,780,1150,1450),{ 7}
   (-1050,-600,-350,-195,-98,-28,0,2222,0,40,66,120,260,580,840,1300,1600),{ 8}
   (-1150,-660,-390,-220,-110,-30,0,2222,0,48,78,140,300,640,960,1450,1800),{ 9}
   (-1300,-720,-390,-220,-110,-30,0,2222,0,48,78,140,330,720,1050,1600,2000),{10}
   (-1450,-780,-430,-240,-120,-32,0,2222,0,58,92,170,370,820,1200,1850,2300),{11}
   (-1600,-820,-430,-240,-120,-32,0,2222,0,58,92,170,400,920,1350,2000,2500),{12}
   (-1800,-920,-480,-260,-130,-34,0,2222,0,68,110,195,440,1000,1500,2300,2800),{13}
   (-2000,-980,-480,-260,-130,-34,0,2222,0,68,110,195,460,1100,1650,2500,3100),{14}
   (-2200,-1050,-520,-290,-145,-38,0,2222,0,76,135,240,550,1250,1900,2900,3500),{15}
   (-2500,-1150,-520,-290,-145,-38,0,2222,0,76,135,240,580,1400,2100,3200,3900)),{16}

   {    отвiр  }
  ((520,370,260,145,76,22,0,2222,0,-26,-44,-78,-150,-280,-400,-600,-740), { 1}
   (580,390,260,145,76,22,0,2222,0,-26,-44,-78,-155,-310,-450,-660,-820), { 2}
   (640,430,290,160,80,24,0,2222,0,-30,-50,-88,-175,-340,-500,-740,-920), { 3}
   (700,450,290,160,80,24,0,2222,0,-30,-50,-88,-185,-380,-560,-840,-1000),{ 4}
   (780,500,320,170,86,26,0,2222,0,-34,-56,-100,-210,-430,-620,-940,-1150),{ 5}
   (860,520,320,170,86,26,0,2222,0,-34,-56,-100,-220,-470,-680,-1050,-1300),{ 6}
   (940,580,350,195,98,28,0,2222,0,-40,-66,-120,-250,-520,-780,-1150,-1450),{ 7}
   (1050,600,350,195,98,28,0,2222,0,-40,-66,-120,-260,-580,-840,-1300,-1600),{8}
   (1150,660,390,220,110,30,0,2222,0,-48,-78,-140,-300,-640,-960,-1450,-1800),{9}
   (1300,720,390,220,110,30,0,2222,0,-48,-78,-140,-330,-720,-1050,-1600,-2000),{10}
   (1450,780,430,240,120,32,0,2222,0,-58,-92,-170,-370,-820,-1200,-1850,-2300),{11}
   (1600,820,430,240,120,32,0,2222,0,-58,-92,-170,-400,-920,-1350,-2000,-2500),{12}
   (1800,920,480,260,130,34,0,2222,0,-68,-110,-195,-440,-1000,-1500,-2300,-2800),{13}
   (2000,980,480,260,130,34,0,2222,0,-68,-110,-195,-460,-1100,-1650,-2500,-3100),{14}
   (2200,1050,520,290,145,38,0,2222,0,-76,-135,-240,-550,-1250,-1900,-2900,-3500),{15}
   (2500,1150,520,290,145,38,0,2222,0,-76,-135,-240,-580,-1400,-2100,-3200,-3900)));{16}

{---------------------------}
//Конвертация String to Float
Procedure Val_Float(St: string; var Zn : real; var Codn : word);
var
// M1 : set ['1'..'9'];
 i : byte;
 ch : char;
 poz : byte;
begin
 if Length(St)=0 then Exit;
 Poz:=Pos('.',St);
 if Poz<>0 then St[Poz]:=',';
// Poz:=Pos('+',St);
 if St[1]='+' then Delete(St,1,1);
 if St='' then Exit;
 if St[1]='-' then
  begin
   Delete(St,1,1);
   Zn:=-(StrToFloat(St));
   Codn:=0;
   Exit;
  end;
 i:=1;
 Codn:=1;
 while i<=Length(St) do
  begin
   Ch:=St[i];
   case Ch of
    '0'..'9' : ;
    ','      :
    else
     begin
      Zn:=0;
      Exit;
     end;
   end; //case
   Inc(i);
   Inc(Codn);
  end;//while
  Codn:=0;
  Zn:= StrToFloat(St);
end;

{---------------------------}
//Конвертация String to Byte
Procedure Val_Int(St: string; var Znach : byte; var Codn : word);
var
 R1 : real;
 Cods,Poz : word;
begin
 Val_Float(St,R1,Cods);
 if Cods<>0 then
  begin
   Codn:=Cods;
   Znach:=0;
   Exit;
  end;
 Codn:=0;
 St:=FloatToStr(R1);
 Poz:=Pos(',',St);
 if Poz<>0 then Delete(St,Poz,Length(st)+1-Poz);
 Znach:=StrToInt(St);
 // St:=Copy(
end;
{---------------------------}
Procedure EiEsEror(St1:string);
var St2:string;
 Begin
  St2:='Формат: Размер Es Ei';
  MessageDlg('Задан некорректный размер '+Rozmir+#13+St2+#13+St1,
     mtError,[mbOk], 0);
  Kod:=27;
  Exit;
End;
{---------------------------}
Procedure Avost;
  Begin
   MessageDlg('Задан некорректный размер '+Rozmir,
     mtInformation,[mbOk], 0);
   Exit;
  Kod:=27;
//  Writeln('Задан некорректный размер: ':40,Rozmir);
//  Writeln('Поле допуска: "':40,Rozmir,'" не предусмотрено ГОСТом');
//                         ReadKey;  Exit;
  End;
{---------------------------}
Procedure Interval_d;
Const
  Interval_IT : array [1..21] of word=
        (3,6,10,18,30,50,80,120,180,250,315,400,500,
        630,800,1000,1250,1600,2000,2500,3150);
  Begin
    a:=1; Kod:=13;
    while  d>Interval_IT[a]  do    begin
        a:=a+1; if a>21 then begin
                               Kod:=27; Exit;
                             end;  end;
  End;   { Interval_d  }
{---------------------------}
Procedure Kvalitet;
  Begin
    Interval_d;
    b:=1; Kod:=13;
    while  Dopusk>Dopusk_Tab[a,b]  do begin
       b:=b+1;  if b>14 then begin
                               Kod:=27; Exit;
                             end;  end;
    IT:=IT_Tab[b];
  End;   {  Kvalitet  }
{--------------------------}
Procedure Tolerance;
  Begin
    Interval_d;
    b:=1; Kod:=13;
    while  IT>IT_Tab[b]  do begin
       b:=b+1;  if b>14 then begin
                               Kod:=27; Exit;
                             end;  end;
    Dopusk:=Dopusk_Tab[a,b];
  End;   { Tolerance }
{---------------------------}
Procedure Val_14;
 Begin
   Osnov_Otklon:='h';   IT:=14;  Kod:=100;
   Tolerance;
   es:=0;   ei:=-int(Dopusk);
 End;     {  Val_14  }
{---------------------------}
Procedure Gost;

 Begin
   if Ord(Rozmir[Code+1])<58  then
      begin                      {  1 символ  }
        Osnov_Otklon:=Rozmir[Code];
        Rozmir1:=Copy(Rozmir,Code+1,9);
        Val_Int(Rozmir1,IT,Code1);
//        val(Rozmir1,IT,Code1);
      end    {  then  }       else
      begin                      {  2 символa  }
        Osnov_Otklon:=Rozmir[Code]+Rozmir[Code+1];
        Rozmir1:=Copy(Rozmir,Code+2,9);
//        IT:=StrToInt(Rozmir1);
//        val(Rozmir1,IT,Code1);
        Val_Int(Rozmir1,IT,Code1);

      end;   {  else  }
        Tolerance;
        if d<=500 then
         begin    {  d  <= 500  }
            Kod:=13;
            a:=1; while Osnov_Otklon<>Osnov_Otklon_Wal_500[a] do
                  begin a:=a+1;  if a>62 then begin Kod:=27; Exit; end;
                  end;
                  if a<31 then List:=1 else List:=2;
            b:=1; while d>Interval_Otkl_500[b] do
                  begin b:=b+1;  if b>25 then begin Kod:=27; Exit; end;
                  end;
            Delta:=0;
            case  a  of
         1..11,43..62   :  begin
                             case a of
                               43  : begin
                                       if IT=7 then a:=44;
                                       if IT=8 then a:=45;
                                     end;
                               46  : begin
                                       if (d>3) and (IT<9) then
                                       Delta:=Delta_Tab[b,a-30]
                                       else begin Kod:=27; Exit; end;
                                     end;
                               47  : begin
                                       if (d>3) and (IT<9) then
                                       Delta:=Delta_Tab[b,a-30];
                                       if IT>8 then a:=48;
                                     end;
                               49  : begin
                                       if (d>3) and (IT<9) then
                                       Delta:=Delta_Tab[b,a-30];
                                       if IT>8 then a:=50;
                                     end;
                           51..62  : begin
                                       if  IT<8 then
                                       Delta:=Delta_Tab[b,a-30];
                                     end;
                             end;  {  case a }

                                if a>30 then a:=a-30;

                                es:=Es_Ei_Tab_500[List,b,a]+Delta;
                                ei:=es-Dopusk; Exit;   end;

              12,42   :  begin  es:=int(Dopusk/2);
                                ei:=-es;       Exit;   end;

             13..41   :  begin
                                if (a=13) and (IT>6) then a:=14;
                                if (a=15) and (IT>7) then a:=16;

                                if a>30 then a:=a-30;

                                ei:=Es_Ei_Tab_500[List,b,a];
                                es:=ei+Dopusk; Exit;   end;
            end;     {  case  a  }
         end      {   500  }  else
       begin     {  d  > 500..3150  }
            Kod:=13;
            a:=1; while Osnov_Otklon<>Osnov_Otklon_Wal_3150[a] do
                  begin a:=a+1;
                        if a>62 then
                        begin Kod:=27; Kod:=27; Exit;  end;
                  if a<18 then List:=1 else List:=2;

                  end;  { while  a  }
            b:=1; while d>Interval_Otkl_3150[b] do b:=b+1;
            case  a  of
       1..7,26..34    :  begin  if a>17 then a:=a-17;
                                es:=Es_Ei_Tab_3150[List,b,a];
                                ei:=es-Dopusk; Exit;   end;
              8,25    :  begin  es:=int(Dopusk/2);
                                ei:=-es;       Exit;   end;
             9..24    :  begin  if a>17 then a:=a-17;
                                ei:=Es_Ei_Tab_3150[List,b,a];
                                es:=ei+Dopusk; Exit;   end;
            end;     {  case  a  }
       end;    {   d > 500..3150  }
       Kod:=13;
 End;    {  Gost  }
{---------------------------}
Procedure Plus;
var Er: boolean;

 Begin
   Rozmir1:=Copy(Rozmir,Code+1,L-Code);
   if Rozmir1[1]='.' then Insert('0',Rozmir1,1);
//   val(Rozmir1,Es,Code1);
    Val_Float(Rozmir1,Es,Code1);
//    Es:=StrToFloat(Rozmir1);
     if Code1=0 then
         begin
           case Ord(Rozmir1[1]) of
             45  : begin   {  " - "  }
                     Rozmir1:=Copy(Rozmir,Code+2,L-Code-1);
//                     val(Rozmir1,Es,Code1);
                       Val_Float(Rozmir1,Es,Code1);
//                       Es:=StrToFloat(Rozmir1);
                     es:=es*1000; ei:=-es;  Dopusk:=Es+Es;
                     Kvalitet;
                   end;    {  45  }
         44,48..57  : begin
                     es:=es*1000; ei:=0;  Dopusk:=Es;
                     Kvalitet;
                   end;    {  48..57  }
                else  begin Kod:=27; Exit; end;
           end;   { case Ord  }
         end   {  Code1=0  }
      else  begin
                 Rozmir2:=Copy(Rozmir1,1,Code1-1);
//                 val(Rozmir2,Es,Code2);
                   Val_Float(Rozmir2,Es,Code2);
//                  Es:=StrToFloat(Rozmir2);
                 es:=es*1000;   { es  }

                 Rozmir2:=Copy(Rozmir1,Code1,L-Code1);

//                 val(Rozmir2,Ei,Code2);
                 Er:=False;
                 if Rozmir2[1]='+' then Er:=True;
                 //Er=True озгачает что вторая часть с плюсом
                 Val_Float(Rozmir2,Ei,Code2);

                 ei:=ei*1000;   { ei  }

                 if Er=True  then if ei>es then
                  begin
                   EiEsEror('Конкретно Ei > Es');
                   exit;
                  end; 

                 Dopusk:=Es-Ei;
                 Kvalitet;
            end;
       if Kod=27 then Exit;
       Kod:=13;
 End;    {  Plus  }
{---------------------------}
Procedure Minus;
var Er : boolean;
Begin
///   Rozmir1:=Copy(Rozmir,Code,L-Code+1);
   Rozmir1:=Copy(Rozmir,Code+1,L-Code);
//   val(Rozmir1,Ei,Code1);
    Val_Float(Rozmir1,Ei,Code1);
//    Ei:=StrToFloat(Rozmir1);
  Kod:=13;

     if Code1=0 then
         begin
           case Ord(Rozmir1[1]) of
//Отловка + (43) отключена.....
             43  : begin
                     Rozmir1:=Copy(Rozmir,Code+2,L-Code-1);
//                     val(Rozmir1,Es,Code1);
                       Val_Float(Rozmir1,Es,Code1);
//                      Es:=StrToFloat(Rozmir1);

                     es:=es*1000; ei:=-es;  Dopusk:=Es+Es;
                     Kvalitet;
                   end;    {  43  }
      44,46,48..57  : begin
                     ei:=ei*1000; es:=0;  Dopusk:=Ei;
                     Kvalitet;
                     Dopusk:=-Ei;
                     ei:=-ei;
                   end;    {  48..57  }
                else
                   begin Kod:=27; Exit; end;
           end;   { case Ord  }
         end   {  Code1=0  }
      else  begin
                 Rozmir2:=Copy(Rozmir1,1,Code1-1);
//                 val(Rozmir2,Es,Code2);
                  Val_Float(Rozmir2,Es,Code2);
//                  Es:=StrToFloat(Rozmir2);
                 es:=es*1000;   { es  }


                 Rozmir2:=Copy(Rozmir1,Code1,L-Code1);
                 if Rozmir2[1]='+' then EiEsEror('Ei > Es');

                 if Rozmir2[1]='-' then Delete(Rozmir2,1,1);
//                 val(Rozmir2,Ei,Code2);
                   Val_Float(Rozmir2,Ei,Code2);
//                  Ei:=StrToFloat(Rozmir2);

                 ei:=ei*1000;   { ei  }
                 if ei<es then EiEsEror('Конкретно Ei > Es');


                 if Kod=13 then
                  begin
                   Dopusk:=abs(Es-Ei);
                   Kvalitet;
                   Ei:=-Ei;
                   Es:=-Es;
                  end
                 else Exit;
            end;
     Kod:=13;
 End;    {  Minus  }
{---********************************************------------------------}
Procedure Wal_Otv(RozmirV:string;Var ITV:byte;
                  Var DmaxV,DminV,DV,DopuskV,EsV,EiV:real;
                  Var Osnov_OtklonV:string;Var KodV:byte);
{ визначення допуску та допускних вiдхилень для зовнiшiх поверхонь }
Label  E;
BEGIN      {  Wal_Otv  }
  Rozmir:=RozmirV;

       Code:=0;  es:=0;  ei:=0;  Dopusk:=0;  Osnov_Otklon:='';
       L:=Length(Rozmir);
       val_Float(Rozmir,d,Code);
//       d:=StrToFloat(Rozmir);

       a:=Pos('e',Rozmir); if a>0 then Code:=a;
       a:=Pos('E',Rozmir); if a>0 then Code:=a;
{       Writeln(Rozmir,'  ','d= ',d:3:2,'     Kod= ',Code);}
       if Code=0 then Val_14           {     h14   }
                 else begin
                        Rozmir1:=Copy(Rozmir,1,Code-1);
//                        val(Rozmir1,d,Code1);
                         Val_Float(Rozmir1,d,Code1);
//                        d:=StrToFloat(Rozmir1);
{                        Writeln('r1= ',Rozmir1,' d= ',d:3:2);}
                        case Rozmir[Code] of
                          '+'   :  begin
                                     Plus;
                                     if Kod=27 then Goto E;
                                   end;
                          '-'   : begin
                                   Minus;
                                  end;
                          else     Gost;
                        end;  { case }
                      end;   {  else  }
       if (es=1313) or(ei=1313) then  begin
           Avost;
                                       end;
      Dmax:=d+es/1000; Dmin:=d+ei/1000;
E:
  if (d<1) or (d>3150) then Kod:=27;
  ITV:=It;
  DmaxV:=Dmax;
  DminV:=Dmin;
  DV:=D;
  DopuskV:=Dopusk;
  EsV:=Es;
  EiV:=Ei;
  Osnov_OtklonV:=Osnov_Otklon;
  KodV:=Kod;
End;        {   Wal_Otv  }

{*******************************************}

Procedure Otvir(Rozmir:string;Var IT:byte;
                  Var Dmax,Dmin,D,Dopusk,Es,Ei:real;
                  Var Osnov_Otklon:string;Var Kod:byte);
  Begin
    Wal_Otv(Rozmir,IT,Dmax,Dmin,D,Dopusk,Es,Ei,Osnov_Otklon,Kod);
    if Kod=100 then
           begin
             Osnov_Otklon:='H';
             Ei:=0; Es:=Dopusk;
             Dmin:=Dmax;  Dmax:=Dmin+es/1000;
             Kod:=13;
           end;
    case Osnov_Otklon[1] of
      'a'..'g' : Kod:=27;
      'i'..'z' : Kod:=27;
           'h' : begin
                   Osnov_Otklon:='H';
                   Ei:=0; Es:=Dopusk;
                   Dmin:=Dmax;  Dmax:=Dmin+es/1000;
                   Kod:=13;
                  end;
    end;
  End;   {   Otvir  }

{*******************************************}

Procedure Wal(Rozmir:string;Var IT:byte;
                  Var Dmax,Dmin,D,Dopusk,Es,Ei:real;
                  Var Osnov_Otklon:string;Var Kod:byte);
Var   Code : byte;
  Begin
    Wal_Otv(Rozmir,IT,Dmax,Dmin,D,Dopusk,Es,Ei,Osnov_Otklon,Code);
    if Code=100 then Kod:=13 else Kod:=Code;
    case Osnov_Otklon[1] of
      'A'..'Z' : Kod:=27;
    end;
  End;   {   Wal  }

{***********************************************************************}

Procedure Liniyni(Rozmir:string;Var IT:byte;
                  Var Dmax,Dmin,D,Dopusk,Es,Ei:real;
                  Var Osnov_Otklon:string;Var Kod:byte);
  Begin
    Wal_Otv(Rozmir,IT,Dmax,Dmin,D,Dopusk,Es,Ei,Osnov_Otklon,Kod);
    if Kod=100 then
           begin
             Osnov_Otklon:='js';
             Es:=Dopusk/2;  Ei:=-Dopusk/2;
             Dmin:=Dmax+ei/1000;  Dmax:=Dmax+es/1000;
             Kod:=13;
           end;
    case Osnov_Otklon[1] of
      'a'..'g' : Kod:=27;
      'i'..'z' : Kod:=27;
           'h' : begin
                   Osnov_Otklon:='js';
                   Es:=Dopusk/2;  Ei:=-Dopusk/2;
                   Dmin:=Dmax+ei/1000;  Dmax:=Dmax+es/1000;
                   Kod:=13;
                  end;
    end;
  End;   {   Liniyni  }


{*******************************************}

END.  {    ESDP   }

